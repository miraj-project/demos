(options "-h")
(options)
(options -h)
(doc options)
(options "-a" "foo")
(doc cljs)
(def a)
(namespace (var a)
)
(var a)
(meta (var a))
(doc alter-meta!)
(var (var a))
a
(var a)
a
(def a 9)
a
(var a)
(var (var a))
(doc alter-meta!)
(start-repl)
(doc refer-clojure)
(symbol "foo/bar")
(namespace (symbol "foo/bar"))
(namespace (symbol "foo.bar.baz/hello-world"))
(type (namespace (symbol "foo.bar.baz/hello-world")))
(doc resolve)
(doc ns-resolve)
(namespace 'foo.bar)
(doc namespace)
(doc find-ns)
(doc all-ns)
(doc resolve)
(doc require)
(doc resolve)
(doc ns-resolve)
(doc find-ns)
(doc update-in)
(doc into)
(vec [0 1] [2 3 4 5])
(merge [0 1] [2 3 4 5])
(merge* [0 1] [2 3 4 5])
(list* [0 1] [2 3 4 5])
(vector [0 1] [2 3 4 5])
(concat [0 1] [2 3 4 5])
(vector (concat [0 1] [2 3 4 5]))
(vec (concat [0 1] [2 3 4 5]))
(doc intern)
(doc all-ns)
(doc interns)
(doc ns-interns)
(doc ns-map)
(doc remove-ns)
(doc for)
(doc flatten)
(def l1 '(a b))
(def l2 '(c d))
(flatten l1 l2)
(flatten (list l1 l2))
(doc flatten)
(doc find-ns)
(doc interns)
(do
)
(doc find-ns)
(doc load)
(doc find-var)
(doc resolve)
(doc ns-resolve)
(doc require)
(doc try)
(doc alias)
(alias 'foo 'bar.baz)
(doc require)
(doc find-var)
